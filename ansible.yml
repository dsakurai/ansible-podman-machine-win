---
- name: Set up podman machine on WSL2
  hosts: localhost

  tasks:
    - name: Update and upgrade
      become: true
      apt:
        upgrade: full
        update_cache: true

    - name: install neovim
      become: true
      apt:
        name: neovim

    - name: Set editor
      shell: update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 100
      become: true

    - name: install podman-compose
      become: true
      apt:
        name: podman-compose

    - name: git set up
      shell: git config --global init.defaultBranch main
    
    - name: ssh
      block:
        - name: ensure directory exits
          file:
            path: "~/.ssh"
            state: directory
            mode: "0700"
        - name: ssh agent
          blockinfile:
            create: true
            path: ~/.ssh/config
            block: |
              AddKeysToAgent yes
              IdentityAgent /run/user/1000/ssh-agent.socket

        - name: ensure directory exits
          file:
            dest: "~/.config/systemd/user"
            state: directory
            mode: "0700"
        - name: Install ssh-agent user service
          copy:
            dest: "~/.config/systemd/user/ssh-agent.service"
            mode: "0644"
            content: |
              [Unit]
              Description=SSH Agent

              [Service]
              Type=simple
              # Fixed socket in the user's runtime dir:
              ExecStart=/usr/bin/ssh-agent -D -a %t/ssh-agent.socket
              # Optional security hardening:
              PrivateTmp=yes
              NoNewPrivileges=yes

              [Install]
              WantedBy=default.target

        - name: Reload user systemd daemon
          command: systemctl --user daemon-reload

        - name: Enable and start ssh-agent user service
          command: systemctl --user enable --now ssh-agent.service

        - name: Warning
          debug:
            msg: If podman compose shows WARNING, run `sudo mount --make-rshared /`
        - name: make shared
          become: true
          blockinfile:
            path: /etc/wsl.conf
            block: |
              command="mount --make-rshared /"

        - name: Add the user to docker group.
          become: true
          user:
            name: "{{ lookup('env','USER') }}"
            groups: docker
            append: yes

        - name: Make a VSCode shortcut on the Windows desktop.
          tags:
            - code
          shell: >
            powershell.exe -NoProfile -ExecutionPolicy Bypass
            -File '{{ lookup("pipe", "wslpath -w " ~ (playbook_dir ~ "/windows/create-vscode-userdata.ps1")) | trim }}'


        - name: VSCode settings
          tags: json
          vars:
            settings_json: '/mnt/c/Users/Daisuke Sakurai/.local/share/vscode/User/settings.json'
          block:
            - name: If the settings file is empty, add '{}'
              block:
                - name: Acquire the file status
                  stat:
                    path: "{{ settings_json }}"
                  register: json_status

                - name: Initialize settings.json with '{}' if the file is missing or empty
                  ansible.builtin.copy:
                    dest: "{{ settings_json }}"
                    content: "{}"
                  when: not json_status.stat.exists or json_status.stat.size|int == 0


            - name: Read VSCode settings
              set_fact:
                jsondata: "{{ lookup('file', settings_json) | from_json}}"

            - name: VSCode settings to be added
              set_fact:
                vscode: {
                    "workbench.colorCustomizations": {
                        "titleBar.activeBackground": "#8dc3ec77",
                        "titleBar.activeForeground": "#000000",
                        "titleBar.inactiveBackground": "#8dc3ec37"
                    },
                    "workbench.colorTheme": "Default Light Modern"
                  }

            - name: Insert our VSCode settings
              set_fact:
                merged: "{{ jsondata | combine (vscode) }}"

            - name: Write our settings to settings.json
              ansible.builtin.copy:
                content: "{{ merged | to_nice_json }}"
                dest: "{{ settings_json }}"
                backup: true
    - name: CUDA
      tags: cuda
      vars:
        cuda_test_image: nvidia/cuda:12.4.1-base-ubuntu22.04
      block:
        - name: Ensure necessary packages exist
          become: yes
          apt:
            name:
              - curl
              - ca-certificates
              - gnupg
            state: present
            update_cache: true

        - name: Add NVIDIA Container Toolkit APT key
          become: true
          shell: |
            curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey \
            | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
          args:
            creates: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg

        - name: Add NVIDIA Container Toolkit APT repo
          become: true
          shell: |
            curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list \
            | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' \
            | tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
          args:
            creates: /etc/apt/sources.list.d/nvidia-container-toolkit.list

        - name: Install NVIDIA Container Toolkit package
          become: true
          apt:
            name: nvidia-container-toolkit
            update_cache: true
        - name: Configure Docker runtime via nvidia-ctk
          become: true
          command: nvidia-ctk runtime configure --runtime=docker --set-as-default
          register: nctk_cfg
          changed_when: "'already configured' not in nctk_cfg.stdout | lower and 'already configured' not in nctk_cfg.stderr | lower"
          # Safe to re-run; it edits /etc/docker/daemon.json when needed.
          # Ref: NVIDIA docs (Configuring Docker)
          # https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/1.14.0/install-guide.html

        - name: Pull CUDA base image for test
          become: true
          ansible.builtin.command:
            cmd: "docker pull {{ cuda_test_image }}"
          changed_when: false
          failed_when: false  # allow offline envs to skip pull

        - name: GPU smoke test (nvidia-smi inside container)
          become: true
          ansible.builtin.shell: |
            set -o pipefail
            docker run --rm --gpus all {{ cuda_test_image }} nvidia-smi | sed -n '1,15p'
          register: smi_out
          changed_when: false
          failed_when: false

        - name: Show nvidia-smi result (first lines)
          become: true
          ansible.builtin.debug:
            var: smi_out.stdout



